From 7a32c50c40b2c7a3dc7deea3a98cbac339b4fb0e Mon Sep 17 00:00:00 2001
Message-Id: <7a32c50c40b2c7a3dc7deea3a98cbac339b4fb0e.1587037657.git.anders.wallin@windriver.com>
From: Jiping Ma <jiping.ma2@windriver.com>
Date: Thu, 16 Apr 2020 03:31:07 +0000
Subject: [PATCH] test for arm64

---
 arch/arm64/kernel/perf_callchain.c | 37 +++++++++++++++++++++++++++---
 1 file changed, 34 insertions(+), 3 deletions(-)

diff --git a/arch/arm64/kernel/perf_callchain.c b/arch/arm64/kernel/perf_callchain.c
index bcafd7dcfe8b..899c10838175 100644
--- a/arch/arm64/kernel/perf_callchain.c
+++ b/arch/arm64/kernel/perf_callchain.c
@@ -81,6 +81,8 @@ compat_user_backtrace(struct compat_frame_tail __user *tail,
 	struct compat_frame_tail buftail;
 	unsigned long err;
 
+	pr_warning("AW: %s\n", __func__);
+
 	/* Also check accessibility of one struct frame_tail beyond */
 	if (!access_ok(VERIFY_READ, tail, sizeof(buftail)))
 		return NULL;
@@ -104,6 +106,29 @@ compat_user_backtrace(struct compat_frame_tail __user *tail,
 
 	return (struct compat_frame_tail __user *)compat_ptr(buftail.fp) - 1;
 }
+
+void
+user_backtrace_thumb(struct perf_callchain_entry_ctx *entry, struct pt_regs *regs)
+{
+        u32 sp;
+        u32 *sp_t;
+	pr_warning("AW: %s\n", __func__);
+
+	/*
+         * Only push sp, lr to stack.
+	 */
+        for (sp = regs->compat_sp; (sp < current->mm->start_stack) &&
+                        (entry->nr < entry->max_stack); sp += 4) {
+                sp_t = (u32 *)sp;
+                if ((*sp_t > regs->compat_sp) && (*sp_t < current->mm->start_stack)) {
+                        if (*(sp_t + 1) < current->mm->end_code &&
+                                *(sp_t + 1) > current->mm->start_code) {
+                                perf_callchain_store(entry,  *(sp_t + 1)-1);
+                                sp += 4;
+                        }
+                }
+        }
+}
 #endif /* CONFIG_COMPAT */
 
 void perf_callchain_user(struct perf_callchain_entry_ctx *entry,
@@ -132,9 +157,15 @@ void perf_callchain_user(struct perf_callchain_entry_ctx *entry,
 
 		tail = (struct compat_frame_tail __user *)regs->compat_fp - 1;
 
-		while ((entry->nr < entry->max_stack) &&
-			tail && !((unsigned long)tail & 0x3))
-			tail = compat_user_backtrace(tail, entry);
+	        if (((u32)tail > current->mm->start_stack) ||
+                        ((u32)tail < regs->compat_sp) ||
+			 regs->compat_sp == regs->compat_usr(7))
+	                user_backtrace_thumb(entry, regs);
+		else {
+			while ((entry->nr < entry->max_stack) &&
+				tail && !((unsigned long)tail & 0x3))
+				tail = compat_user_backtrace(tail, entry);
+		}
 #endif
 	}
 }
-- 
2.18.1

